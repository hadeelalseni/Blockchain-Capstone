// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
// DONE :)
const verifier = artifacts.require('Verifier');
var Web3 = require('web3');

if (typeof web3 !== 'undefined'){
    web3 = new Web3(web3.currentProvider);
   } else {
    web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:7545"));
}

// - use the contents from proof.json generated from zokrates steps
// DONE :)
const proofme = require('../../zokrates/code/square/proof.json');

console.log("LLOG: "+ proofme);
contract('TestSquareVerifier', accounts =>{
    const account_one = accounts[0];
    const account_two = accounts[1];

    beforeEach('Test verification with in/correct proof', async function(){
        try{
            this.contract = await verifier.new({from: account_one});
        }catch(error){
            console.log("this.contract = await verifier.new({from: account_one}); this line have error :l", error);
        }
        
    })

// Test verification with correct proof
/*    it('verification with correct proof', async function () {
        let flag = false;
        try{
            if(await this.contract.verifyTx(web3.utils.utf8ToHex(proofme.proof.A),
            web3.utils.utf8ToHex(proofme.proof.A_p), web3.utils.utf8ToHex(proofme.proof.B), web3.utils.utf8ToHex(proofme.proof.B_p),
            web3.utils.utf8ToHex(proofme.proof.C), web3.utils.utf8ToHex(proofme.proof.C_p), web3.utils.utf8ToHex(proofme.proof.H), 
            web3.utils.utf8ToHex(proofme.proof.K), web3.utils.utf8ToHex(proofme.proof.input))){
                 flag = true;
            }//web3.utils.utf8ToHex
        }catch(error){
            console.log("verification with correct proof ERROR: ", error);
        }
        assert.equal(flag, true,"the proof is wrong.");
    })
*/
// Test verification with incorrect proof
    it('verification with incorrect proof', async function () {
        let flag = true;
        console.log("وراك ما تطلعن")
        var proofJSON1 = JSON.parse(proofme);
        console.log("gjgjnsvjklnv"+ proofJSON1);
        var proofJSON2 = JSON.parse(proofJSON1);
        var proofJSON = JSON.parse(proofJSON2);
        console.log("before yay: "+proofJSON.proof.A_p[0]);
        let first = [proofJSON.proof.A_p[0],proofJSON.proof.A_p[1]]
        console.log("Fist yay: "+first);
        try{
            
            //I just swap first two :) 
  /*          if(await this.contract.verifyTx(proofme.proof.a_p, 
                proofme.proof.a, proofme.proof.b, proofme.proof.b_p, 
                proofme.proof.c, proofme.proof.c_p, proofme.proof.h, 
                proofme.proof.k, proofme.proof.input)){
                flag = false;*/
     //       }
            /*if(await this.contract.verifyTx(proofme.proof.a_p, 
                proofme.proof.a, proofme.proof.b, proofme.proof.b_p, 
                proofme.proof.c, proofme.proof.c_p, proofme.proof.h, 
                proofme.proof.k, proofme.proof.input)){
                flag = false;
            }*/
        }catch(error){
            console.log("verification with incorrect proof ERROR: ", error);
        }
        assert.equal(flag, false,"the proof is not wrong.");
    })

})





    

