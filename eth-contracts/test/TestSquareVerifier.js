// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
// DONE :)
const verifier = artifacts.require('Verifier');


// - use the contents from proof.json generated from zokrates steps
// DONE :)
const proofme = require('../../zokrates/code/square/proof');


contract('TestSquareVerifier', accounts =>{
    const account_one = accounts[0];
    const account_two = accounts[1];

    beforeEach('Test verification with in/correct proof', async function(){
        try{
            this.contract = await Verifier.new({from: account_one});
        }catch(error){
            console.log("this.contract = await verifier.new({from: account_one}); this line have error :l", error);
        }
        
    })

// Test verification with correct proof
    it('verification with correct proof', async function () {
        let flag = false;
        try{
            if(await this.contract.verifyTx( proofme.proof.a,
                 proofme.proof.a_p, proofme.proof.b, proofme.proof.b_p,
                 proofme.proof.c, proofme.proof.c_p, proofme.proof.h, 
                 proofme.proof.k, proofme.proof.input)){
                flag = true;
            }
        }catch(error){
            console.log("verification with correct proof ERROR: ", error);
        }
        assert.equal(flag, true,"the proof is wrong.");
    })

// Test verification with incorrect proof
    it('verification with incorrect proof', async function () {
        let flag = true;
        try{
            //I just swap first two :) 
            if(await this.contract.verifyTx( proofme.proof.a_p, 
                proofme.proof.a, proofme.proof.b, proofme.proof.b_p, 
                proofme.proof.c, proofme.proof.c_p, proofme.proof.h, 
                proofme.proof.k, proofme.proof.input)){
                flag = false;
            }
        }catch(error){
            console.log("verification with incorrect proof ERROR: ", error);
        }
        assert.equal(flag, false,"the proof is not wrong.");
    })

})





    

